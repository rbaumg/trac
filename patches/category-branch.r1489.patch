Index: trac/db_default.py
===================================================================
--- trac/db_default.py	(revision 1488)
+++ trac/db_default.py	(revision 1489)
@@ -21,7 +21,7 @@
 
 
 # Database version identifier. Used for automatic upgrades.
-db_version = 10
+db_version = 11
 
 def __mkreports(reports):
     """Utility function used to create report data in same syntax as the
@@ -73,6 +73,7 @@
 );
 CREATE TABLE ticket (
         id              integer PRIMARY KEY,
+        category        text,           -- the nature of the ticket
         time            integer,        -- the time it was created
         changetime      integer,
         component       text,
@@ -372,7 +373,9 @@
                 ('severity', 'normal', 4),
                 ('severity', 'minor', 5),
                 ('severity', 'trivial', 6),
-                ('severity', 'enhancement', 7),
+                ('category', 'Bug', 1),
+                ('category', 'Feature', 2),
+                ('category', 'Task', 3),
                 ('priority', 'highest', 1),
                 ('priority', 'high', 2),
                 ('priority', 'normal', 3),
@@ -422,6 +425,7 @@
    '<a href="http://trac.edgewall.com/">http://trac.edgewall.com/</a>'),
   ('ticket', 'default_version', ''),
   ('ticket', 'default_severity', 'normal'),
+  ('ticket', 'default_category', 'Bug'),
   ('ticket', 'default_priority', 'normal'),
   ('ticket', 'default_milestone', ''),
   ('ticket', 'default_component', 'component1'),
Index: trac/scripts/admin.py
===================================================================
--- trac/scripts/admin.py	(revision 1488)
+++ trac/scripts/admin.py	(revision 1489)
@@ -750,6 +750,23 @@
                 self._do_wiki_import(filename, page, cursor)
 
 
+    ## (Ticket) Category
+    _help_category = [('category list', 'Show possible ticket categories'),
+                      ('category add <value>', 'Add a category value option'),
+                      ('category change <value> <newvalue>',
+                       'Change a category value'),
+                      ('category remove <value>', 'Remove category value')]
+ 
+    def complete_category (self, text, line, begidx, endidx):
+        if begidx == 16:
+            comp = self.get_enum_list ('category')
+        elif begidx < 15:
+            comp = ['list','add','change','remove']
+        return self.word_complete(text, comp)
+ 
+    def do_category(self, line):
+        self._do_enum('category', line)
+ 
     ## (Ticket) Priority
     _help_priority = [('priority list', 'Show possible ticket priorities'),
                        ('priority add <value>', 'Add a priority value option'),
Index: trac/Query.py
===================================================================
--- trac/Query.py	(revision 1488)
+++ trac/Query.py	(revision 1489)
@@ -82,7 +82,7 @@
 
         # FIXME: the user should be able to configure which columns should
         # be displayed
-        cols = ['id', 'summary', 'status', 'owner', 'priority', 'milestone',
+        cols = ['category', 'id', 'summary', 'status', 'owner', 'priority', 'milestone',
                 'component', 'version', 'severity', 'resolution', 'reporter']
         cols += [f['name'] for f in get_custom_fields(self.env)]
 
@@ -114,9 +114,9 @@
             return 0
         cols.sort(sort_columns)
 
-        # Only display the first seven columns by default
+        # Only display the first eight columns by default
         # FIXME: Make this configurable on a per-user and/or per-query basis
-        self.cols = cols[:7]
+        self.cols = cols[:8]
         if not self.order in self.cols and not self.order == self.group:
             # Make sure the column we order by is visible, if it isn't also
             # the column we group by
@@ -358,6 +358,10 @@
         properties.append({'name': 'summary', 'type': 'text',
                            'label': 'Summary'})
         properties.append({
+            'name': 'category', 'type': 'select', 'label': 'Category',
+            'options': rows_to_list("SELECT name FROM enum "
+                                    "WHERE type='category' ORDER BY value")})
+        properties.append({
             'name': 'status', 'type': 'radio', 'label': 'Status',
             'options': rows_to_list("SELECT name FROM enum WHERE type='status' "
                                     "ORDER BY value")})
Index: trac/Timeline.py
===================================================================
--- trac/Timeline.py	(revision 1488)
+++ trac/Timeline.py	(revision 1489)
@@ -44,21 +44,27 @@
             return []
 
         sql, params = [], []
+        # Column   0:    1:       2:   3:             4:       5:     6:
+        #          time  (int id) id   render method  message  author extra
         if 'changeset' in filters:
-            sql.append("SELECT time,rev,'','changeset',message,author"
+            sql.append("SELECT time,rev,'','changeset',message,author,''"
                        " FROM revision WHERE time>=%s AND time<=%s")
             params += (start, stop)
         if 'ticket' in filters:
-            sql.append("SELECT time,id,'','newticket',summary,reporter"
+            sql.append("SELECT time,id,'','newticket',summary,reporter,category"
                        " FROM ticket WHERE time>=%s AND time<=%s")
             params += (start, stop)
-            sql.append("SELECT time,ticket,'','reopenedticket','',author "
-                       "FROM ticket_change WHERE field='status' "
-                       "AND newvalue='reopened' AND time>=%s AND time<=%s")
+            # FIXME join with ticket table for retrieving category...
+            sql.append("SELECT t1.time,t1.ticket,'','reopenedticket','',t1.author,t.category"
+                       " FROM ticket_change t1"
+                       "   INNER JOIN ticket t ON t1.ticket = t.id"
+                       " WHERE t1.field='status'"
+                       "   AND t1.newvalue='reopened' AND t1.time>=%s AND t1.time<=%s")
             params += (start, stop)
             sql.append("SELECT t1.time,t1.ticket,t2.newvalue,'closedticket',"
-                       "t3.newvalue,t1.author"
+                       "t3.newvalue,t1.author,t.category"
                        " FROM ticket_change t1"
+                       "   INNER JOIN ticket t ON t1.ticket = t.id"
                        "   INNER JOIN ticket_change t2 ON t1.ticket = t2.ticket"
                        "     AND t1.time = t2.time"
                        "   LEFT OUTER JOIN ticket_change t3 ON t1.time = t3.time"
@@ -68,11 +74,11 @@
                        "   AND t1.time >= %s AND t1.time <= %s")
             params += (start,stop)
         if 'wiki' in filters:
-            sql.append("SELECT time,-1,name,'wiki',comment,author"
+            sql.append("SELECT time,-1,name,'wiki',comment,author,''"
                        " FROM wiki WHERE time>=%s AND time<=%s")
             params += (start, stop)
         if 'milestone' in filters:
-            sql.append("SELECT completed AS time,-1,name,'milestone','',''" 
+            sql.append("SELECT completed AS time,-1,name,'milestone','','',''" 
                        " FROM milestone WHERE completed>=%s AND completed<=%s")
             params += (start, stop)
 
@@ -99,7 +105,8 @@
                 'tdata': escape(row[2]),
                 'type': row[3],
                 'message': row[4] or '',
-                'author': escape(row[5] or 'anonymous')
+                'author': escape(row[5] or 'anonymous'),
+                'extra' : row[6] or '',
             }
             info.append(item)
         return info
@@ -234,6 +241,8 @@
             href = self.env.abs_href
 
         item['href'] = escape(href.ticket(item['idata']))
+        item['category'] = item['extra']
+        del item['extra']
         if req.args.get('format') == 'rss':
             item['message'] = escape(wiki_to_html(item['message'],
                                                   req.hdf, self.env,
Index: trac/tests/query.py
===================================================================
--- trac/tests/query.py	(revision 1488)
+++ trac/tests/query.py	(revision 1489)
@@ -19,7 +19,7 @@
         query = Query(self.env, order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(id,0)=0,id""")
@@ -28,7 +28,7 @@
         query = Query(self.env, order='id', desc=1)
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(id,0)=0 DESC,id DESC""")
@@ -37,7 +37,7 @@
         query = Query(self.env, order='id', verbose=1)
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,reporter,description,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,component,reporter,description,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(id,0)=0,id""")
@@ -46,7 +46,7 @@
         query = Query(self.env) # priority is default order
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(priority,'')='',priority.value,id""")
@@ -55,7 +55,7 @@
         query = Query(self.env, desc=1) # priority is default order
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(priority,'')='' DESC,priority.value DESC,id""")
@@ -64,7 +64,7 @@
         query = Query(self.env, order='version')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,version,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,version,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
   LEFT OUTER JOIN version ON (version.name=version)
@@ -74,7 +74,7 @@
         query = Query(self.env, order='version', desc=1)
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,version,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,milestone,version,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
   LEFT OUTER JOIN version ON (version.name=version)
@@ -84,7 +84,7 @@
         query = Query.from_string(self.env, 'milestone=milestone1', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,component,version,time,changetime,milestone,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,component,version,time,changetime,milestone,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(milestone,'')='milestone1'
@@ -94,7 +94,7 @@
         query = Query(self.env, order='id', group='milestone')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,component,version,milestone,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,component,version,milestone,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
   LEFT OUTER JOIN milestone ON (milestone.name=milestone)
@@ -104,7 +104,7 @@
         query = Query(self.env, order='id', group='milestone', groupdesc=1)
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,component,version,milestone,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,priority,component,version,milestone,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
   LEFT OUTER JOIN milestone ON (milestone.name=milestone)
@@ -114,7 +114,7 @@
         query = Query(self.env, group='priority')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,milestone,component,version,priority,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,category,status,owner,milestone,component,version,priority,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 ORDER BY COALESCE(priority,'')='',priority.value,id""")
@@ -123,7 +123,7 @@
         query = Query.from_string(self.env, 'milestone!=milestone1', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,milestone,status,owner,priority,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,milestone,category,status,owner,priority,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(milestone,'')!='milestone1'
@@ -134,7 +134,7 @@
                                   order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,status,category,owner,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(status,'') IN ('new','assigned','reopened')
@@ -144,7 +144,7 @@
         query = Query.from_string(self.env, 'owner~=someone', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') LIKE '%someone%'
@@ -154,7 +154,7 @@
         query = Query.from_string(self.env, 'owner!~=someone', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') NOT LIKE '%someone%'
@@ -164,7 +164,7 @@
         query = Query.from_string(self.env, 'owner^=someone', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') LIKE 'someone%'
@@ -174,7 +174,7 @@
         query = Query.from_string(self.env, 'owner$=someone', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') LIKE '%someone'
@@ -185,7 +185,7 @@
         query = Query.from_string(self.env, 'foo=something', order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value, foo.value AS foo
+"""SELECT id,summary,category,status,owner,priority,milestone,component,time,changetime,priority.value AS priority_value, foo.value AS foo
 FROM ticket
   LEFT OUTER JOIN ticket_custom AS foo ON (id=foo.ticket AND foo.name='foo')
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
@@ -197,7 +197,7 @@
                                   order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') IN ('someone','someone_else')
@@ -208,7 +208,7 @@
                                   order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE COALESCE(owner,'') NOT IN ('someone','someone_else')
@@ -219,7 +219,7 @@
                                   order='id')
         sql = query.get_sql()
         self.assertEqual(sql,
-"""SELECT id,summary,owner,status,priority,milestone,component,time,changetime,priority.value AS priority_value
+"""SELECT id,summary,owner,category,status,priority,milestone,component,time,changetime,priority.value AS priority_value
 FROM ticket
   LEFT OUTER JOIN enum AS priority ON (priority.type='priority' AND priority.name=priority)
 WHERE (COALESCE(owner,'') LIKE '%someone%' OR COALESCE(owner,'') LIKE '%someone_else%')
Index: trac/upgrades/db11.py
===================================================================
--- trac/upgrades/db11.py	(revision 0)
+++ trac/upgrades/db11.py	(revision 1489)
@@ -0,0 +1,44 @@
+sql = """
+-- Add category to 'ticket'
+CREATE TEMP TABLE ticket_old AS SELECT * FROM ticket;
+DROP TABLE ticket;
+CREATE TABLE ticket (
+        id              integer PRIMARY KEY,
+        category        text,           -- the nature of the ticket
+        time            integer,        -- the time it was created
+        changetime      integer,
+        component       text,
+        severity        text,
+        priority        text,
+        owner           text,           -- who is this ticket assigned to
+        reporter        text,
+        cc              text,           -- email addresses to notify
+        url             text,           -- url related to this ticket
+        version         text,           --
+        milestone       text,           --
+        status          text,
+        resolution      text,
+        summary         text,           -- one-line summary
+        description     text,           -- problem description (long)
+        keywords        text
+);
+
+INSERT INTO ticket(id, category, time, changetime, component,
+                   severity, priority, owner, reporter, cc, url, version,
+                   milestone, status, resolution, summary, description, keywords)
+  SELECT id, 'Bug', time, changetime, component,
+         severity, priority, owner, reporter, cc, url, version,
+         milestone, status, resolution, summary, description, keywords FROM ticket_old
+  WHERE severity <> 'enhancement';
+
+INSERT INTO ticket(id, category, time, changetime, component,
+                   severity, priority, owner, reporter, cc, url, version,
+                   milestone, status, resolution, summary, description, keywords)
+  SELECT id, 'Feature', time, changetime, component,
+         'normal', priority, owner, reporter, cc, url, version,
+         milestone, status, resolution, summary, description, keywords FROM ticket_old
+  WHERE severity = 'enhancement';
+"""
+
+def do_upgrade(env, ver, cursor):
+    cursor.execute(sql)
Index: trac/Ticket.py
===================================================================
--- trac/Ticket.py	(revision 1488)
+++ trac/Ticket.py	(revision 1489)
@@ -34,7 +34,7 @@
 
 
 class Ticket(UserDict):
-    std_fields = ['time', 'component', 'severity', 'priority', 'milestone',
+    std_fields = ['category', 'time', 'component', 'severity', 'priority', 'milestone',
                   'reporter', 'owner', 'cc', 'url', 'version', 'status',
                   'resolution', 'keywords', 'summary', 'description',
                   'changetime']
@@ -321,6 +321,8 @@
                           self.env.get_config('ticket', 'default_component'))
         ticket.setdefault('milestone',
                           self.env.get_config('ticket', 'default_milestone'))
+        ticket.setdefault('category',
+                          self.env.get_config('ticket', 'default_category'))
         ticket.setdefault('priority',
                           self.env.get_config('ticket', 'default_priority'))
         ticket.setdefault('severity',
@@ -346,6 +348,9 @@
                         req.hdf, 'newticket.milestones')
         util.sql_to_hdf(self.db, "SELECT name FROM version ORDER BY name",
                         req.hdf, 'newticket.versions')
+        util.sql_to_hdf(self.db, "SELECT name FROM enum WHERE type='category' "
+                                 "ORDER BY name",
+                        req.hdf, 'enums.category')
         util.sql_to_hdf(self.db, "SELECT name FROM enum WHERE type='priority' "
                                  "ORDER BY value",
                         req.hdf, 'enums.priority')
@@ -438,6 +443,7 @@
         util.hdf_add_if_missing(req.hdf, 'ticket.components', ticket['component'])
         util.hdf_add_if_missing(req.hdf, 'ticket.milestones', ticket['milestone'])
         util.hdf_add_if_missing(req.hdf, 'ticket.versions', ticket['version'])
+        util.hdf_add_if_missing(req.hdf, 'enums.category', ticket['category'])
         util.hdf_add_if_missing(req.hdf, 'enums.priority', ticket['priority'])
         util.hdf_add_if_missing(req.hdf, 'enums.severity', ticket['severity'])
         util.hdf_add_if_missing(req.hdf, 'enums.resolution', 'fixed')
Index: templates/ticket.cs
===================================================================
--- templates/ticket.cs	(revision 1488)
+++ templates/ticket.cs	(revision 1489)
@@ -29,7 +29,7 @@
 
 <div id="content" class="ticket">
 
- <h1>Ticket #<?cs var:ticket.id ?> <?cs
+ <h1><?cs var:ticket.category ?> Ticket #<?cs var:ticket.id ?> <?cs
  if:ticket.status == 'closed' ?>(Closed: <?cs var:ticket.resolution ?>)<?cs
  elif:ticket.status != 'new' ?>(<?cs var:ticket.status ?>)<?cs
  /if ?></h1>
@@ -163,10 +163,13 @@
      var:ticket.summary ?>" /><?cs
    if $trac.acl.TICKET_ADMIN ?>
     <br />
+    <label for="category">Category:</label><?cs
+    call:hdf_select(enums.category, "category", ticket.category, 0) ?>
+    <br />
     <label for="description">Description:</label>
     <div style="float: left">
      <textarea id="description" name="description" class="wikitext" rows="10" cols="68"><?cs
-       var:ticket.description ?></textarea>
+        var:ticket.description ?></textarea>
     </div>
     <br style="clear: left" />
     <label for="reporter">Reporter:</label>
Index: templates/newticket.cs
===================================================================
--- templates/newticket.cs	(revision 1488)
+++ templates/newticket.cs	(revision 1489)
@@ -9,8 +9,13 @@
 
 <div id="content" class="ticket">
 
-<h3>Create New Ticket:</h3>
 <form id="newticket" action="<?cs var:cgi_location ?>#preview" method="post">
+ <h3>Create New <?cs 
+   if:len(enums.category) > #0 ?><?cs 
+    call:hdf_select(enums.category, "category", newticket.category, 0) ?><?cs
+   /if ?>
+  Ticket
+ </h3>
  <div class="field">
   <label for="reporter">Your email or username:</label><br />
   <input type="text" id="reporter" name="reporter" size="40" value="<?cs
Index: templates/timeline.cs
===================================================================
--- templates/timeline.cs	(revision 1488)
+++ templates/timeline.cs	(revision 1489)
@@ -50,7 +50,7 @@
               item.node_list + item.message) ?><?cs
  elif:item.type == 'newticket' ?><?cs
   call:tlitem(item.href, 'newticket',
-              'Ticket <em>#' + item.idata + '</em> created by ' + item.author,
+              item.category + ' Ticket <em>#' + item.idata + '</em> created by ' + item.author,
               item.message) ?><?cs
  elif:item.type == 'closedticket' ?><?cs
   if:item.message ?><?cs
@@ -59,11 +59,11 @@
    set:imessage = '' ?><?cs
   /if ?><?cs
   call:tlitem(item.href, 'closedticket',
-              'Ticket <em>#' + item.idata + '</em> resolved by ' + item.author,
+              item.category + ' Ticket <em>#' + item.idata + '</em> resolved by ' + item.author,
               item.tdata + imessage) ?><?cs
  elif:item.type == 'reopenedticket' ?><?cs
   call:tlitem(item.href, 'newticket',
-              'Ticket <em>#' + item.idata + '</em> reopened by ' + item.author,
+              item.category + ' Ticket <em>#' + item.idata + '</em> reopened by ' + item.author,
               '') ?><?cs
  elif:item.type == 'wiki' ?><?cs
   call:tlitem(item.href, 'wiki',
