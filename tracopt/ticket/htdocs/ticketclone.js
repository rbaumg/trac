// Generated by CoffeeScript 2.3.1
(function() {
  // -*- coding: utf-8 -*-

  // Copyright (C) 2016 Edgewall Software
  // All rights reserved.

  // This software is licensed as described in the file COPYING, which
  // you should have received as part of this distribution. The terms
  // are also available at http://trac.edgewall.org/wiki/TracLicense.

  // This software consists of voluntary contributions made by many
  // individuals. For the exact contribution history, see the revision
  // history and logs, available at http://trac.edgewall.org/log/.

  // Add ''Clone'' ticket action in ticket box and ticket comments.

  // The script is added via the tracopt.ticket.clone component.

  // It uses the following Trac global variables:
  //  - from add_script_data in tracopt.ticket.clone: newticket_href, ui
  //    (TODO: generalize this, have an href() js utility function)
  //  - from add_script_data in trac.web.chrome: form_token
  //  - from add_script_data in trac.ticket.web_ui:
  //     * old_values: {name: value} for each field of the current ticket
  //     * changes: list of objects containing the following properties,
  //       {author, date, cnum, comment, comment_history, fields, permanent}
  var $, addCloneFromComments, addField, captionedButton, createCloneAction, quoteText;

  $ = jQuery;

  captionedButton = function(symbol, text) {
    if (ui.use_symbols) {
      return symbol;
    } else {
      return `${symbol} ${text}`;
    }
  };

  addField = function(form, name, value) {
    value = value != null ? $.htmlEscape(value) : '';
    return form.append($(`<input type="hidden" name="field_${name}" value="${value}">`));
  };

  createCloneAction = function(title) {
    var form, name, oldvalue;
    // the action needs to be wrapped in a <form>, as we want a POST
    form = $(`<form action="${newticket_href}" method="post">\n <div class="inlinebuttons">\n  <input type="submit" name="clone"\n         value="${captionedButton('+', _('Clone'))}"\n         title="${title}">\n  <input type="hidden" name="__FORM_TOKEN" value="${form_token}">\n  <input type="hidden" name="preview" value="">\n </div>\n</form>`);
// from ticket's old values, prefill most of the fields for new ticket
    for (name in old_values) {
      oldvalue = old_values[name];
      if (name !== "id" && name !== "summary" && name !== "description" && name !== "status" && name !== "resolution" && name !== "reporter") {
        addField(form, name, oldvalue);
      }
    }
    return form;
  };

  addCloneFromComments = function(changes) {
    var btns, c, cform, form, i, len, results;
    form = createCloneAction(_("Create a new ticket from this comment"));
// for each comment, retrieve comment number and add specific form
    results = [];
    for (i = 0, len = changes.length; i < len; i++) {
      c = changes[i];
      btns = $(`#trac-change-${c.cnum}-${c.date} .trac-ticket-buttons`);
      if (btns.length) {
        // clone a specific form for this comment, as we need 2 specific fields
        cform = form.clone();
        addField(cform, 'summary', _("(part of #%(ticketid)s) %(summary)s", {
          ticketid: old_values.id,
          summary: old_values.summary
        }));
        addField(cform, 'description', _("Copied from [%(source)s]:\n%(description)s", {
          source: `ticket:${old_values.id}#comment:${c.cnum}`,
          description: quoteText(c.comment)
        }));
        results.push(btns.prepend(cform));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  $(document).ready(function() {
    var c, clone;
    // clone from description
    clone = createCloneAction(_("Create a copy of this ticket"));
    addField(clone, 'summary', _("%(summary)s (cloned)", {
      summary: old_values.summary
    }));
    addField(clone, 'description', _("Cloned from #%(id)s:\n%(description)s", {
      id: old_values.id,
      description: quoteText(old_values.description)
    }));
    $('#ticket .description .searchable').before(clone);
    // clone from comment
    if ((typeof old_values !== "undefined" && old_values !== null) && (typeof changes !== "undefined" && changes !== null)) {
      return addCloneFromComments((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = changes.length; i < len; i++) {
          c = changes[i];
          if ((c.cnum != null) && c.comment && c.permanent) {
            results.push(c);
          }
        }
        return results;
      })());
    }
  });

  quoteText = function(text) {
    var length, pattern, repl;
    if (text) {
      length = text.length;
      pattern = /\r\n|[\r\n\u000b\u000c\u001c\u001d\u001e\u0085\u2028\u2029]/g;
      repl = function(match, offset) {
        if (match.length + offset !== length) {
          return '\n> ';
        } else {
          return '';
        }
      };
      return '> ' + text.replace(pattern, repl) + '\n';
    } else {
      return '';
    }
  };

}).call(this);
